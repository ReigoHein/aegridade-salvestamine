<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="timescaledb" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">test1</stringProp>
        <stringProp name="dbUrl"></stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="cleanup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">DELETE FROM measurements;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Write 1k" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loopcount,10)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,100)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="query">INSERT INTO measurements(time, client, resource, measurement, metric, slot, count, avg, min, max, sum, p95, p98, p99, p999) VALUES
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;duration&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;error&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;billed_duration&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;invocation&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;max_memory&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;memory&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)});</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="read 100" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,100)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, sum(count) FROM measurements
WHERE measurement = &apos;duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, sum(count) FROM measurements
WHERE measurement = &apos;error&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;billed_duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;memory&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, max(max) FROM measurements
WHERE measurement = &apos;max_memory&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="cleanup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">DELETE FROM measurements;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Write 10k" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loopcount,100)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,100)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="query">INSERT INTO measurements(time, client, resource, measurement, metric, slot, count, avg, min, max, sum, p95, p98, p99, p999) VALUES
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;duration&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;error&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;billed_duration&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;invocation&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;max_memory&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;memory&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)});</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="read 1k" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,1000)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, sum(count) FROM measurements
WHERE measurement = &apos;duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, sum(count) FROM measurements
WHERE measurement = &apos;error&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;billed_duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;memory&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, max(max) FROM measurements
WHERE measurement = &apos;max_memory&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="cleanup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">DELETE FROM measurements;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Write 25k" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loopcount,250)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,100)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="query">INSERT INTO measurements(time, client, resource, measurement, metric, slot, count, avg, min, max, sum, p95, p98, p99, p999) VALUES
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;duration&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;error&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;billed_duration&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;invocation&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;max_memory&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)}),
	(NOW(), &apos;5a8f2db970ff7c0188da585a&apos;, &apos;5da97ff61dae9fea0ad1ad27&apos;, &apos;memory&apos;, &apos;total&apos;, 60, ${__Random(20, 40)}, ${__Random(70,80)}, ${__Random(50,60)}, ${__Random(116,120)}, ${__Random(1400,2800)}, ${__Random(90,100)}, ${__Random(100,105)}, ${__Random(105, 110)}, ${__Random(110,120)});</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="read 2.5k" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,2500)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, sum(count) FROM measurements
WHERE measurement = &apos;duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, sum(count) FROM measurements
WHERE measurement = &apos;error&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;billed_duration&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, avg(avg) FROM measurements
WHERE measurement = &apos;memory&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
            <stringProp name="dataSource">test1</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT time_bucket(&apos;1 minute&apos;, time) as one_minute, max(max) FROM measurements
WHERE measurement = &apos;max_memory&apos;
GROUP BY one_minute
ORDER BY one_minute DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="cleanup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${__threadGroupName}" enabled="true">
          <stringProp name="dataSource">test1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">DELETE FROM measurements;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
