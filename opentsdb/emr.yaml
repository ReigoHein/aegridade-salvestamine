AWSTemplateFormatVersion: '2010-09-09'
Description: "Creates a EMR Cluster with two core nodes running HBase and adds endpoints to System Manager"
Parameters:
  EMRClusterName:
    Description: Name of the cluster
    Type: String
    Default: resources-metadata
  EC2KeyName:
    Description: The name of an SSH keypair known to EC2. If none exists, it can be created under EC2 console.
    Type: AWS::EC2::KeyPair::KeyName
  MasterInstanceType:
    Description: Instance type to be used for the master instance.
    Type: String
    Default: m3.xlarge
  CoreInstanceType:
    Description: Instance type to be used for core instances.
    Type: String
    Default: m3.xlarge
  NumberOfCoreInstances:
    Description: Number of instances - master + n-1 core instances
    Type: Number
    Default: 2
  SubnetID:
    Description: Subnet to deploy the cluster to
    Type: AWS::EC2::Subnet::Id
  LogUri:
    Description: S3 bucket to store logs in
    Default: s3://aws-opentsdb-logs/
    Type: String
  S3DataUri:
    Description: HBase database s3 bucket
    Default: s3://aws-opentsdb-storage/
    Type: String
  ReleaseLabel:
    Description: EMR release label (refer to https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html)
    Default: emr-6.0.0
    Type: String
Mappings: {}
Resources:
  EMRCluster:
    DependsOn:
    - EMRClusterServiceRole
    - EMRClusterinstanceProfileRole
    - EMRClusterinstanceProfile
    Type: AWS::EMR::Cluster
    Properties:
      Tags:
        -
          Key: "Source"
          Value: "aws-opentsdb-emr"
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Name"
          Value: !Ref 'EMRClusterName'
      Applications:
      - Name: Hbase
      Configurations:
      - Classification: hbase-site
        ConfigurationProperties:
          hbase.rootdir:
            Ref: S3DataUri
      - Classification: hbase
        ConfigurationProperties:
          hbase.emr.storageMode: s3
      Instances:
        Ec2KeyName:
          Ref: EC2KeyName
        Ec2SubnetId:
          Ref: SubnetID
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType:
            Ref: MasterInstanceType
          Market: ON_DEMAND
          Name: Master
        CoreInstanceGroup:
          InstanceCount:
            Ref: NumberOfCoreInstances
          InstanceType:
            Ref: CoreInstanceType
          Market: ON_DEMAND
          Name: Core
        TerminationProtected: false
      VisibleToAllUsers: true
      JobFlowRole:
        Ref: EMRClusterinstanceProfile
      ReleaseLabel:
        Ref: ReleaseLabel
      LogUri:
        Ref: LogUri
      Name:
        Ref: EMRClusterName
      AutoScalingRole: EMR_AutoScaling_DefaultRole
      ServiceRole:
        Ref: EMRClusterServiceRole
  EMRClusterServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - elasticmapreduce.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Path: "/"
  EMRClusterinstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      Path: "/"
  EMRClusterinstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EMRClusterinstanceProfileRole
Outputs:
  VPCId:
    Description: "ClusterId of EMR Cluster"
    Value:
      Ref: "EMRCluster"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-EMRCluster"